// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateChildJSONBody defines parameters for CreateChild.
type CreateChildJSONBody struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

// UpdateChildByNameJSONBody defines parameters for UpdateChildByName.
type UpdateChildByNameJSONBody struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

// CreateEventJSONBody defines parameters for CreateEvent.
type CreateEventJSONBody struct {
	Active    *bool              `json:"active,omitempty"`
	Created   *time.Time         `json:"created,omitempty"`
	EventType string             `json:"event_type"`
	Id        openapi_types.UUID `json:"id"`
	Modified  *time.Time         `json:"modified,omitempty"`
	Name      string             `json:"name"`
}

// CreateMemoryJSONBody defines parameters for CreateMemory.
type CreateMemoryJSONBody struct {
	Active         *bool   `json:"active,omitempty"`
	BlobStorageUrl *string `json:"blob_storage_url,omitempty"`
	Child          *struct {
		Active   *bool              `json:"active,omitempty"`
		Created  *time.Time         `json:"created,omitempty"`
		Id       openapi_types.UUID `json:"id"`
		Modified *time.Time         `json:"modified,omitempty"`
		Name     string             `json:"name"`
	} `json:"child,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Modified    *time.Time         `json:"modified,omitempty"`
	Name        string             `json:"name"`
}

// CreateChildJSONRequestBody defines body for CreateChild for application/json ContentType.
type CreateChildJSONRequestBody CreateChildJSONBody

// UpdateChildByNameJSONRequestBody defines body for UpdateChildByName for application/json ContentType.
type UpdateChildByNameJSONRequestBody UpdateChildByNameJSONBody

// CreateEventJSONRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody CreateEventJSONBody

// CreateMemoryJSONRequestBody defines body for CreateMemory for application/json ContentType.
type CreateMemoryJSONRequestBody CreateMemoryJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/login)
	Login(w http.ResponseWriter, r *http.Request)

	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)

	// (GET /child)
	GetChildren(w http.ResponseWriter, r *http.Request)

	// (POST /child)
	CreateChild(w http.ResponseWriter, r *http.Request)

	// (GET /child/{childId})
	GetChildById(w http.ResponseWriter, r *http.Request, childId openapi_types.UUID)

	// (PUT /child/{childId})
	UpdateChildById(w http.ResponseWriter, r *http.Request, childId openapi_types.UUID)

	// (GET /child/{name})
	GetChildByName(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /child/{name})
	UpdateChildByName(w http.ResponseWriter, r *http.Request, name string)
	// Deletes an event by ID
	// (DELETE /event/{eventId})
	DeleteEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Get a event by ID
	// (GET /event/{eventId})
	GetEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Updates a event by ID
	// (PUT /event/{eventId})
	UpdateEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)

	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request)

	// (POST /events)
	CreateEvent(w http.ResponseWriter, r *http.Request)
	// Get a identity by ID
	// (GET /identity/{identityId})
	GetIdentityById(w http.ResponseWriter, r *http.Request, identityId openapi_types.UUID)

	// (GET /memory)
	GetMemories(w http.ResponseWriter, r *http.Request)

	// (POST /memory)
	CreateMemory(w http.ResponseWriter, r *http.Request)
	// Deletes a memory by ID
	// (DELETE /memory/{memoryId})
	DeleteMemory(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID)
	// Get a memory by ID
	// (GET /memory/{memoryId})
	GetMemoryById(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID)
	// Updates a memory by ID
	// (PUT /memory/{memoryId})
	UpdateMemoryById(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildren operation middleware
func (siw *ServerInterfaceWrapper) GetChildren(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildren(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateChild operation middleware
func (siw *ServerInterfaceWrapper) CreateChild(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChild(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildById operation middleware
func (siw *ServerInterfaceWrapper) GetChildById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "childId" -------------
	var childId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "childId", mux.Vars(r)["childId"], &childId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildById(w, r, childId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChildById operation middleware
func (siw *ServerInterfaceWrapper) UpdateChildById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "childId" -------------
	var childId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "childId", mux.Vars(r)["childId"], &childId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChildById(w, r, childId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildByName operation middleware
func (siw *ServerInterfaceWrapper) GetChildByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", mux.Vars(r)["name"], &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildByName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChildByName operation middleware
func (siw *ServerInterfaceWrapper) UpdateChildByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", mux.Vars(r)["name"], &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChildByName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEventById operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEventById(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventById operation middleware
func (siw *ServerInterfaceWrapper) GetEventById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventById(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateEventById operation middleware
func (siw *ServerInterfaceWrapper) UpdateEventById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEventById(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateEvent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEvent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIdentityById operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identityId" -------------
	var identityId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "identityId", mux.Vars(r)["identityId"], &identityId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identityId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentityById(w, r, identityId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMemories operation middleware
func (siw *ServerInterfaceWrapper) GetMemories(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMemory operation middleware
func (siw *ServerInterfaceWrapper) CreateMemory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMemory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMemory operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "memoryId" -------------
	var memoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memoryId", mux.Vars(r)["memoryId"], &memoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemory(w, r, memoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMemoryById operation middleware
func (siw *ServerInterfaceWrapper) GetMemoryById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "memoryId" -------------
	var memoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memoryId", mux.Vars(r)["memoryId"], &memoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemoryById(w, r, memoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMemoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemoryById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "memoryId" -------------
	var memoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memoryId", mux.Vars(r)["memoryId"], &memoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemoryById(w, r, memoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/auth/login", wrapper.Login).Methods("POST")

	r.HandleFunc(options.BaseURL+"/auth/logout", wrapper.Logout).Methods("POST")

	r.HandleFunc(options.BaseURL+"/child", wrapper.GetChildren).Methods("GET")

	r.HandleFunc(options.BaseURL+"/child", wrapper.CreateChild).Methods("POST")

	r.HandleFunc(options.BaseURL+"/child/{childId}", wrapper.GetChildById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/child/{childId}", wrapper.UpdateChildById).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/child/{name}", wrapper.GetChildByName).Methods("GET")

	r.HandleFunc(options.BaseURL+"/child/{name}", wrapper.UpdateChildByName).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/event/{eventId}", wrapper.DeleteEventById).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/event/{eventId}", wrapper.GetEventById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/event/{eventId}", wrapper.UpdateEventById).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/events", wrapper.GetEvents).Methods("GET")

	r.HandleFunc(options.BaseURL+"/events", wrapper.CreateEvent).Methods("POST")

	r.HandleFunc(options.BaseURL+"/identity/{identityId}", wrapper.GetIdentityById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/memory", wrapper.GetMemories).Methods("GET")

	r.HandleFunc(options.BaseURL+"/memory", wrapper.CreateMemory).Methods("POST")

	r.HandleFunc(options.BaseURL+"/memory/{memoryId}", wrapper.DeleteMemory).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/memory/{memoryId}", wrapper.GetMemoryById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/memory/{memoryId}", wrapper.UpdateMemoryById).Methods("PUT")

	return r
}

type LoginRequestObject struct {
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse struct {
	Id openapi_types.UUID `json:"id"`
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogindefaultJSONResponse struct {
	Body struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}
	StatusCode int
}

func (response LogindefaultJSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout200JSONResponse interface{}

func (response Logout200JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogoutdefaultJSONResponse struct {
	Body struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}
	StatusCode int
}

func (response LogoutdefaultJSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildrenRequestObject struct {
}

type GetChildrenResponseObject interface {
	VisitGetChildrenResponse(w http.ResponseWriter) error
}

type GetChildren200JSONResponse []struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response GetChildren200JSONResponse) VisitGetChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildrendefaultJSONResponse struct {
	Body struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetChildrendefaultJSONResponse) VisitGetChildrenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateChildRequestObject struct {
	Body *CreateChildJSONRequestBody
}

type CreateChildResponseObject interface {
	VisitCreateChildResponse(w http.ResponseWriter) error
}

type CreateChild201JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response CreateChild201JSONResponse) VisitCreateChildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetChildByIdRequestObject struct {
	ChildId openapi_types.UUID `json:"childId"`
}

type GetChildByIdResponseObject interface {
	VisitGetChildByIdResponse(w http.ResponseWriter) error
}

type GetChildById200JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response GetChildById200JSONResponse) VisitGetChildByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildByIdRequestObject struct {
	ChildId openapi_types.UUID `json:"childId"`
}

type UpdateChildByIdResponseObject interface {
	VisitUpdateChildByIdResponse(w http.ResponseWriter) error
}

type UpdateChildById201JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response UpdateChildById201JSONResponse) VisitUpdateChildByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetChildByNameRequestObject struct {
	Name string `json:"name"`
}

type GetChildByNameResponseObject interface {
	VisitGetChildByNameResponse(w http.ResponseWriter) error
}

type GetChildByName200JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response GetChildByName200JSONResponse) VisitGetChildByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildByNameRequestObject struct {
	Name string `json:"name"`
	Body *UpdateChildByNameJSONRequestBody
}

type UpdateChildByNameResponseObject interface {
	VisitUpdateChildByNameResponse(w http.ResponseWriter) error
}

type UpdateChildByName201JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response UpdateChildByName201JSONResponse) VisitUpdateChildByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildByName400JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response UpdateChildByName400JSONResponse) VisitUpdateChildByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildByName404JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response UpdateChildByName404JSONResponse) VisitUpdateChildByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEventByIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
}

type DeleteEventByIdResponseObject interface {
	VisitDeleteEventByIdResponse(w http.ResponseWriter) error
}

type DeleteEventById204Response struct {
}

func (response DeleteEventById204Response) VisitDeleteEventByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEventById404Response struct {
}

func (response DeleteEventById404Response) VisitDeleteEventByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEventByIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
}

type GetEventByIdResponseObject interface {
	VisitGetEventByIdResponse(w http.ResponseWriter) error
}

type GetEventById200JSONResponse struct {
	Active    *bool              `json:"active,omitempty"`
	Created   *time.Time         `json:"created,omitempty"`
	EventType string             `json:"event_type"`
	Id        openapi_types.UUID `json:"id"`
	Modified  *time.Time         `json:"modified,omitempty"`
	Name      string             `json:"name"`
}

func (response GetEventById200JSONResponse) VisitGetEventByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEventByIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
}

type UpdateEventByIdResponseObject interface {
	VisitUpdateEventByIdResponse(w http.ResponseWriter) error
}

type UpdateEventById200JSONResponse struct {
	Active    *bool              `json:"active,omitempty"`
	Created   *time.Time         `json:"created,omitempty"`
	EventType string             `json:"event_type"`
	Id        openapi_types.UUID `json:"id"`
	Modified  *time.Time         `json:"modified,omitempty"`
	Name      string             `json:"name"`
}

func (response UpdateEventById200JSONResponse) VisitUpdateEventByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEventById404Response struct {
}

func (response UpdateEventById404Response) VisitUpdateEventByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEventsRequestObject struct {
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse []struct {
	Active    *bool              `json:"active,omitempty"`
	Created   *time.Time         `json:"created,omitempty"`
	EventType string             `json:"event_type"`
	Id        openapi_types.UUID `json:"id"`
	Modified  *time.Time         `json:"modified,omitempty"`
	Name      string             `json:"name"`
}

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsdefaultJSONResponse struct {
	Body struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetEventsdefaultJSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEventRequestObject struct {
	Body *CreateEventJSONRequestBody
}

type CreateEventResponseObject interface {
	VisitCreateEventResponse(w http.ResponseWriter) error
}

type CreateEvent201JSONResponse struct {
	Active    *bool              `json:"active,omitempty"`
	Created   *time.Time         `json:"created,omitempty"`
	EventType string             `json:"event_type"`
	Id        openapi_types.UUID `json:"id"`
	Modified  *time.Time         `json:"modified,omitempty"`
	Name      string             `json:"name"`
}

func (response CreateEvent201JSONResponse) VisitCreateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentityByIdRequestObject struct {
	IdentityId openapi_types.UUID `json:"identityId"`
}

type GetIdentityByIdResponseObject interface {
	VisitGetIdentityByIdResponse(w http.ResponseWriter) error
}

type GetIdentityById200JSONResponse struct {
	Active   *bool              `json:"active,omitempty"`
	Created  *time.Time         `json:"created,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Modified *time.Time         `json:"modified,omitempty"`
	Name     string             `json:"name"`
}

func (response GetIdentityById200JSONResponse) VisitGetIdentityByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMemoriesRequestObject struct {
}

type GetMemoriesResponseObject interface {
	VisitGetMemoriesResponse(w http.ResponseWriter) error
}

type GetMemories200JSONResponse []struct {
	Active         *bool   `json:"active,omitempty"`
	BlobStorageUrl *string `json:"blob_storage_url,omitempty"`
	Child          *struct {
		Active   *bool              `json:"active,omitempty"`
		Created  *time.Time         `json:"created,omitempty"`
		Id       openapi_types.UUID `json:"id"`
		Modified *time.Time         `json:"modified,omitempty"`
		Name     string             `json:"name"`
	} `json:"child,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Modified    *time.Time         `json:"modified,omitempty"`
	Name        string             `json:"name"`
}

func (response GetMemories200JSONResponse) VisitGetMemoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMemoriesdefaultJSONResponse struct {
	Body struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetMemoriesdefaultJSONResponse) VisitGetMemoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateMemoryRequestObject struct {
	Body *CreateMemoryJSONRequestBody
}

type CreateMemoryResponseObject interface {
	VisitCreateMemoryResponse(w http.ResponseWriter) error
}

type CreateMemory201JSONResponse struct {
	Active         *bool   `json:"active,omitempty"`
	BlobStorageUrl *string `json:"blob_storage_url,omitempty"`
	Child          *struct {
		Active   *bool              `json:"active,omitempty"`
		Created  *time.Time         `json:"created,omitempty"`
		Id       openapi_types.UUID `json:"id"`
		Modified *time.Time         `json:"modified,omitempty"`
		Name     string             `json:"name"`
	} `json:"child,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Modified    *time.Time         `json:"modified,omitempty"`
	Name        string             `json:"name"`
}

func (response CreateMemory201JSONResponse) VisitCreateMemoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemoryRequestObject struct {
	MemoryId openapi_types.UUID `json:"memoryId"`
}

type DeleteMemoryResponseObject interface {
	VisitDeleteMemoryResponse(w http.ResponseWriter) error
}

type DeleteMemory204Response struct {
}

func (response DeleteMemory204Response) VisitDeleteMemoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMemory404Response struct {
}

func (response DeleteMemory404Response) VisitDeleteMemoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetMemoryByIdRequestObject struct {
	MemoryId openapi_types.UUID `json:"memoryId"`
}

type GetMemoryByIdResponseObject interface {
	VisitGetMemoryByIdResponse(w http.ResponseWriter) error
}

type GetMemoryById200JSONResponse struct {
	Active         *bool   `json:"active,omitempty"`
	BlobStorageUrl *string `json:"blob_storage_url,omitempty"`
	Child          *struct {
		Active   *bool              `json:"active,omitempty"`
		Created  *time.Time         `json:"created,omitempty"`
		Id       openapi_types.UUID `json:"id"`
		Modified *time.Time         `json:"modified,omitempty"`
		Name     string             `json:"name"`
	} `json:"child,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Modified    *time.Time         `json:"modified,omitempty"`
	Name        string             `json:"name"`
}

func (response GetMemoryById200JSONResponse) VisitGetMemoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemoryByIdRequestObject struct {
	MemoryId openapi_types.UUID `json:"memoryId"`
}

type UpdateMemoryByIdResponseObject interface {
	VisitUpdateMemoryByIdResponse(w http.ResponseWriter) error
}

type UpdateMemoryById200JSONResponse struct {
	Active         *bool   `json:"active,omitempty"`
	BlobStorageUrl *string `json:"blob_storage_url,omitempty"`
	Child          *struct {
		Active   *bool              `json:"active,omitempty"`
		Created  *time.Time         `json:"created,omitempty"`
		Id       openapi_types.UUID `json:"id"`
		Modified *time.Time         `json:"modified,omitempty"`
		Name     string             `json:"name"`
	} `json:"child,omitempty"`
	Created     *time.Time         `json:"created,omitempty"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Modified    *time.Time         `json:"modified,omitempty"`
	Name        string             `json:"name"`
}

func (response UpdateMemoryById200JSONResponse) VisitUpdateMemoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemoryById404Response struct {
}

func (response UpdateMemoryById404Response) VisitUpdateMemoryByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (GET /child)
	GetChildren(ctx context.Context, request GetChildrenRequestObject) (GetChildrenResponseObject, error)

	// (POST /child)
	CreateChild(ctx context.Context, request CreateChildRequestObject) (CreateChildResponseObject, error)

	// (GET /child/{childId})
	GetChildById(ctx context.Context, request GetChildByIdRequestObject) (GetChildByIdResponseObject, error)

	// (PUT /child/{childId})
	UpdateChildById(ctx context.Context, request UpdateChildByIdRequestObject) (UpdateChildByIdResponseObject, error)

	// (GET /child/{name})
	GetChildByName(ctx context.Context, request GetChildByNameRequestObject) (GetChildByNameResponseObject, error)

	// (PUT /child/{name})
	UpdateChildByName(ctx context.Context, request UpdateChildByNameRequestObject) (UpdateChildByNameResponseObject, error)
	// Deletes an event by ID
	// (DELETE /event/{eventId})
	DeleteEventById(ctx context.Context, request DeleteEventByIdRequestObject) (DeleteEventByIdResponseObject, error)
	// Get a event by ID
	// (GET /event/{eventId})
	GetEventById(ctx context.Context, request GetEventByIdRequestObject) (GetEventByIdResponseObject, error)
	// Updates a event by ID
	// (PUT /event/{eventId})
	UpdateEventById(ctx context.Context, request UpdateEventByIdRequestObject) (UpdateEventByIdResponseObject, error)

	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)

	// (POST /events)
	CreateEvent(ctx context.Context, request CreateEventRequestObject) (CreateEventResponseObject, error)
	// Get a identity by ID
	// (GET /identity/{identityId})
	GetIdentityById(ctx context.Context, request GetIdentityByIdRequestObject) (GetIdentityByIdResponseObject, error)

	// (GET /memory)
	GetMemories(ctx context.Context, request GetMemoriesRequestObject) (GetMemoriesResponseObject, error)

	// (POST /memory)
	CreateMemory(ctx context.Context, request CreateMemoryRequestObject) (CreateMemoryResponseObject, error)
	// Deletes a memory by ID
	// (DELETE /memory/{memoryId})
	DeleteMemory(ctx context.Context, request DeleteMemoryRequestObject) (DeleteMemoryResponseObject, error)
	// Get a memory by ID
	// (GET /memory/{memoryId})
	GetMemoryById(ctx context.Context, request GetMemoryByIdRequestObject) (GetMemoryByIdResponseObject, error)
	// Updates a memory by ID
	// (PUT /memory/{memoryId})
	UpdateMemoryById(ctx context.Context, request UpdateMemoryByIdRequestObject) (UpdateMemoryByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(w http.ResponseWriter, r *http.Request) {
	var request LogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildren operation middleware
func (sh *strictHandler) GetChildren(w http.ResponseWriter, r *http.Request) {
	var request GetChildrenRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildren(ctx, request.(GetChildrenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildren")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildrenResponseObject); ok {
		if err := validResponse.VisitGetChildrenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChild operation middleware
func (sh *strictHandler) CreateChild(w http.ResponseWriter, r *http.Request) {
	var request CreateChildRequestObject

	var body CreateChildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChild(ctx, request.(CreateChildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateChildResponseObject); ok {
		if err := validResponse.VisitCreateChildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildById operation middleware
func (sh *strictHandler) GetChildById(w http.ResponseWriter, r *http.Request, childId openapi_types.UUID) {
	var request GetChildByIdRequestObject

	request.ChildId = childId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildById(ctx, request.(GetChildByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildByIdResponseObject); ok {
		if err := validResponse.VisitGetChildByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChildById operation middleware
func (sh *strictHandler) UpdateChildById(w http.ResponseWriter, r *http.Request, childId openapi_types.UUID) {
	var request UpdateChildByIdRequestObject

	request.ChildId = childId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChildById(ctx, request.(UpdateChildByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChildById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateChildByIdResponseObject); ok {
		if err := validResponse.VisitUpdateChildByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildByName operation middleware
func (sh *strictHandler) GetChildByName(w http.ResponseWriter, r *http.Request, name string) {
	var request GetChildByNameRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildByName(ctx, request.(GetChildByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildByNameResponseObject); ok {
		if err := validResponse.VisitGetChildByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChildByName operation middleware
func (sh *strictHandler) UpdateChildByName(w http.ResponseWriter, r *http.Request, name string) {
	var request UpdateChildByNameRequestObject

	request.Name = name

	var body UpdateChildByNameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChildByName(ctx, request.(UpdateChildByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChildByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateChildByNameResponseObject); ok {
		if err := validResponse.VisitUpdateChildByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEventById operation middleware
func (sh *strictHandler) DeleteEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request DeleteEventByIdRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEventById(ctx, request.(DeleteEventByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEventById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEventByIdResponseObject); ok {
		if err := validResponse.VisitDeleteEventByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventById operation middleware
func (sh *strictHandler) GetEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request GetEventByIdRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventById(ctx, request.(GetEventByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventByIdResponseObject); ok {
		if err := validResponse.VisitGetEventByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEventById operation middleware
func (sh *strictHandler) UpdateEventById(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request UpdateEventByIdRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEventById(ctx, request.(UpdateEventByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEventById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateEventByIdResponseObject); ok {
		if err := validResponse.VisitUpdateEventByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request) {
	var request GetEventsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEvent operation middleware
func (sh *strictHandler) CreateEvent(w http.ResponseWriter, r *http.Request) {
	var request CreateEventRequestObject

	var body CreateEventJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEvent(ctx, request.(CreateEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEvent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEventResponseObject); ok {
		if err := validResponse.VisitCreateEventResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIdentityById operation middleware
func (sh *strictHandler) GetIdentityById(w http.ResponseWriter, r *http.Request, identityId openapi_types.UUID) {
	var request GetIdentityByIdRequestObject

	request.IdentityId = identityId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentityById(ctx, request.(GetIdentityByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentityById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIdentityByIdResponseObject); ok {
		if err := validResponse.VisitGetIdentityByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMemories operation middleware
func (sh *strictHandler) GetMemories(w http.ResponseWriter, r *http.Request) {
	var request GetMemoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMemories(ctx, request.(GetMemoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMemories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMemoriesResponseObject); ok {
		if err := validResponse.VisitGetMemoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMemory operation middleware
func (sh *strictHandler) CreateMemory(w http.ResponseWriter, r *http.Request) {
	var request CreateMemoryRequestObject

	var body CreateMemoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMemory(ctx, request.(CreateMemoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMemory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateMemoryResponseObject); ok {
		if err := validResponse.VisitCreateMemoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMemory operation middleware
func (sh *strictHandler) DeleteMemory(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID) {
	var request DeleteMemoryRequestObject

	request.MemoryId = memoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMemory(ctx, request.(DeleteMemoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMemory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMemoryResponseObject); ok {
		if err := validResponse.VisitDeleteMemoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMemoryById operation middleware
func (sh *strictHandler) GetMemoryById(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID) {
	var request GetMemoryByIdRequestObject

	request.MemoryId = memoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMemoryById(ctx, request.(GetMemoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMemoryById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMemoryByIdResponseObject); ok {
		if err := validResponse.VisitGetMemoryByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMemoryById operation middleware
func (sh *strictHandler) UpdateMemoryById(w http.ResponseWriter, r *http.Request, memoryId openapi_types.UUID) {
	var request UpdateMemoryByIdRequestObject

	request.MemoryId = memoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMemoryById(ctx, request.(UpdateMemoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMemoryById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMemoryByIdResponseObject); ok {
		if err := validResponse.VisitUpdateMemoryByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
